{"version":3,"sources":["../../../src/models/user/index.js"],"names":["deps","save","bind","findOneById","findOneByEmailOrUsername","remove","update","validateUserNamePassword","crypto","user","User","userDoc","then","toObject","password","catch","err","code","badData","idEmailUsername","findOne","_id","$or","email","username","id","updates","findByIdAndUpdate","$set","new","compare","toString","spread","isPasswordValid","toJSON","obj","unauthorized"],"mappings":"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","file":"index.js","sourcesContent":["import boom from 'boom';\nimport * as crypto from '../../config/crypto';\n\nfunction save({ User }, user) {\n  let userDoc = new User(user);\n  return userDoc.save()\n  .then(() => {\n    userDoc = userDoc.toObject();\n    delete userDoc.password;\n    return userDoc;\n  })\n  .catch((err) => {\n    if (err.code === 11000) {\n      throw boom.badData('Duplicate username or email', err);\n    }\n    throw err;\n  });\n}\n\nfunction findOneById({ User }, idEmailUsername) {\n  return User.findOne(\n    { _id: idEmailUsername },\n    { password: 0 }\n  )\n  .then(user => user.toObject());\n}\n\nfunction findOneByEmailOrUsername({ User }, idEmailUsername) {\n  return User.findOne(\n    { $or: [{ email: idEmailUsername }, { username: idEmailUsername }] },\n    { password: 0 }\n  )\n  .then(user => user.toObject());\n}\n\nfunction remove({ User }, id) {\n  return User.remove({ _id: id });\n}\n\nfunction update({ User }, id, updates) {\n  return User.findByIdAndUpdate(id, { $set: updates }, { new: true })\n  .then(user => user.toObject())\n  .catch((err) => {\n    if (err.code === 11000) {\n      throw boom.badData('Duplicate username or email', err);\n    }\n    throw err;\n  });\n}\n\nfunction validateUserNamePassword({ User }, username, password) {\n  return User.findOne({ $or: [{ email: username }, { username }] })\n  .then((user) => {\n    if (user) {\n      return [\n        user,\n        crypto.compare(password.toString(), user.password.toString())\n      ];\n    }\n    return [null, null];\n  })\n  .spread((user, isPasswordValid) => {\n    if (user && isPasswordValid) {\n      user.toJSON = function () {\n        const obj = this.toObject();\n        delete obj.password;\n        return obj;\n      };\n      return user;\n    }\n    throw boom.unauthorized('Wrong username/email or password');\n  });\n}\n\nexport default function (deps) {\n  return {\n    save: save.bind(null, deps),\n    findOneById: findOneById.bind(null, deps),\n    findOneByEmailOrUsername: findOneByEmailOrUsername.bind(null, deps),\n    remove: remove.bind(null, deps),\n    update: update.bind(null, deps),\n    validateUserNamePassword: validateUserNamePassword.bind(null, deps)\n  };\n}\n"]}