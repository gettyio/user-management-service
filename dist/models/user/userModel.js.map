{"version":3,"sources":["../../../src/models/user/userModel.js"],"names":["mongoose","Schema","UserSchema","roles","type","String","username","index","unique","password","required","email","strict","timestamps","createdAt","updatedAt","pre","preSave","next","done","crypto","hash","then","catch","e","model"],"mappings":";;;;;;kBAEe,gBAAwB;AAAA,MAAZA,QAAY,QAAZA,QAAY;AAAA,MAC7BC,MAD6B,GAClBD,QADkB,CAC7BC,MAD6B;;AAErC,MAAMC,aAAa,IAAID,MAAJ,CAAW;AAC5BE,WAAO,CAAC,EAAEC,MAAMC,MAAR,EAAD,CADqB;AAE5BC,cAAU,EAAEF,MAAMC,MAAR,EAAgBE,OAAO,IAAvB,EAA6BC,QAAQ,IAArC,EAFkB;AAG5BC,cAAU,EAAEL,MAAMC,MAAR,EAAgBK,UAAU,IAA1B,EAHkB;AAI5BC,WAAO,EAAEP,MAAMC,MAAR,EAAgBK,UAAU,IAA1B,EAAgCH,OAAO,IAAvC,EAA6CC,QAAQ,IAArD;AAJqB,GAAX,EAKhB;AACDI,YAAQ,KADP;AAEDC,gBAAY,EAAEC,WAAW,YAAb,EAA2BC,WAAW,YAAtC;AAFX,GALgB,CAAnB;;AAUAb,aAAWc,GAAX,CAAe,MAAf,EAAuB,IAAvB,EAA6B,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6B;AAAA;;AACxD,QAAI,KAAKV,QAAT,EAAmB;AACjBW,aAAOC,IAAP,CAAY,KAAKZ,QAAjB,EACCa,IADD,CACM,UAACb,QAAD,EAAc;AAClB,cAAKA,QAAL,GAAgBA,QAAhB;AACAU;AACD,OAJD,EAKCI,KALD,CAKO;AAAA,eAAKJ,KAAKK,CAAL,CAAL;AAAA,OALP;AAMD;AACDN;AACD,GAVD;;AAYA,SAAOlB,SAASyB,KAAT,CAAe,MAAf,EAAuBvB,UAAvB,CAAP;AACD,C;;AA3BD;;IAAYkB,M","file":"userModel.js","sourcesContent":["import * as crypto from '../../config/crypto';\n\nexport default function ({ mongoose }) {\n  const { Schema } = mongoose;\n  const UserSchema = new Schema({\n    roles: [{ type: String }],\n    username: { type: String, index: true, unique: true },\n    password: { type: String, required: true },\n    email: { type: String, required: true, index: true, unique: true },\n  }, {\n    strict: false,\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  });\n\n  UserSchema.pre('save', true, function preSave(next, done) {\n    if (this.password) {\n      crypto.hash(this.password)\n      .then((password) => {\n        this.password = password;\n        done();\n      })\n      .catch(e => done(e));\n    }\n    next();\n  });\n\n  return mongoose.model('User', UserSchema);\n}\n"]}